org: sebastianchu
service: api-productos

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  timeout: 30
  stage: ${opt:stage, 'dev'}
  iam:
    role: arn:aws:iam::971808350791:role/LabRole
  environment:
    TABLE_NAME: ProductosTable-${self:provider.stage}
    STAGE: ${self:provider.stage}

package:
  include:
    - handler.js
    - utils/**

functions:
  crearProducto:
    handler: handler.crearProducto
    events:
      - http:
          path: /productos
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - tenant_id
              - usuario_id
            allowCredentials: false

  listarProductos:
    handler: handler.listarProductos
    events:
      - http:
          path: /productos
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  buscarProducto:
    handler: handler.buscarProducto
    events:
      - http:
          path: /productos/{codigo}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  modificarProducto:
    handler: handler.modificarProducto
    events:
      - http:
          path: /productos/{codigo}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - tenant_id
            allowCredentials: false

  eliminarProducto:
    handler: handler.eliminarProducto
    events:
      - http:
          path: /productos/{codigo}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - tenant_id
            allowCredentials: false

  actualizarProductos:
    handler: handler.actualizarProductos
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ProductosTable
              - StreamArn
          batchSize: 5
          startingPosition: LATEST

  swaggerDocs:
    handler: handler.swaggerDocs
    events:
      - http:
          path: docs/{proxy+}
          method: any
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    ProductosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductosTable-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: codigo
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: codigo
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

